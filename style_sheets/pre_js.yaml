# For pre.js generation - converts mangled names back to hierarchical readable JS objects
MetaInfo:
  indent_space: 4

ProjectMeta:
  tagging_template: |-
    // pre.js - Generated automatically by embind_generator
    
    // preRun: Initialize before WebAssembly module
    Module['preRun'] = [
        function() {
            console.log("Running preRun: Initialization before WebAssembly.");
        }
    ];
    
    // postRun: Execute after WebAssembly execution
    Module['postRun'] = [
        function() {
            console.log("Running postRun after WebAssembly execution.");
            console.log(Module);
    
            Module['exported'] = {
                // STL Containers
    % for stl_container in stl_containers:
                ${shared.get_stl_readable_name(stl_container)}: Module['${stl_container.get_mangled_name()}'],
    % endfor
    
                // Top-level classes and structs
    % for defination in definations:
        % if defination.__class__.__name__ in ['ClassMeta', 'StructMeta']:
                ${defination.get_ast_name()}: Module['${defination.get_mangled_name()}'],
        % endif
    % endfor
    
                // Top-level constants (all constants are bound as top-level in embind)
    ${pre_js.generate_all_constants_content(namespaces)}
    ${pre_js.generate_all_namespaces_content(namespaces)}
            };
        }
    ];
    
    <%!
    import sys
    import os
    
    # Add the style_sheets directory to Python path
    current_dir = os.getcwd()
    style_sheets_dir = os.path.join(current_dir, 'style_sheets')
    if style_sheets_dir not in sys.path:
        sys.path.insert(0, style_sheets_dir)
    
    import shared_helpers as shared
    import pre_js_helpers as pre_js
    %> 